// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProjectComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  comment   String // text of comment
  projectId String // commented project
  author    String // id of author
  upvotedBy String[] // ids of users

  @@map(name: "project_comments")
}

model CollaborationComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  comment             String // text of comment
  projectId           String // commented project
  questionId          String // commented question
  author              String // id of author
  upvotedBy           String[] // ids of users
  responses           CollaborationCommentResponse[] @relation("Response") // responses to the comment

  @@map(name: "collaboration_comments")
}

model CollaborationCommentResponse {
  id        String @id @default(uuid())
  createdAt DateTime @default(now())

  response    String // text of response
  author      String // id of the author
  upvotedBy   String[] // ids of users
  commentId   String // id of comment this responds to to
  comment     CollaborationComment @relation("Response", fields: [commentId], references: [id]) // comment this responds to

  @@map("collaboration_comments_responses")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  projectId String // liked project
  likedBy   String // user id  
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  projectId  String // followed project
  followedBy String // user id  
}

model UserReactionOnUpdate {
  createdAt DateTime @default(now())

  reactedBy String //userID
  updateId  String //object id that was reacted to 

  reactionShortCode String // foreign key field referencing Reaction model
  reactedWith       Reaction @relation(fields: [reactionShortCode], references: [shortCode])

  @@id(name: "compositeID", [reactedBy, updateId])
}

model Reaction {
  shortCode            String                 @id @unique //shortcode of emoji, see unicode 
  nativeSymbol         String //native representation of emoji symbol, see unicode
  UserReactionOnUpdate UserReactionOnUpdate[]
}

model SurveyVote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  vote             String // vote
  projectId        String // project
  surveyQuestionId String // voted survey question
  votedBy          String // id of author

  @@map(name: "survey_votes")
}
